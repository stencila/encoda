trigger:
  branches:
    include:
      - master
      # Ensure that CI is triggered for tags
      - refs/tags/*

variables:
  - name: NODE_VERSION
    value: '18.x'

jobs:
  - job: Linux
    pool:
      vmImage: ubuntu-latest
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: $(NODE_VERSION)
        displayName: 'Use Node.js $(NODE_VERSION)'

      - script: npm ci
        displayName: 'Install dependencies'

      # Run tests with
      #   - Run in band because appears to run more smoothly (avoids memory issues when running in parallel?)
      #   - Fifteen (!) minute test timeout
      #   - Force exit to prevent hanging
      # Currently skipping tests on Windows due to weird, unresolvable failures
      # https://dev.azure.com/stencila/stencila/_build/results?buildId=732&view=logs&j=b17395f6-68a3-5682-0476-d3f6f1043109&t=0d6dcb53-0957-53aa-c18a-237166af945a&l=532
      - script: npx jest --coverage --runInBand --testTimeout=900000 --forceExit
        displayName: 'Run tests'
        env:
          # Tell Node.js how much un-garbage-collected-memory it can
          # allow for to prevent it running out (in Mb; Azure build agents have 6Gb
          # physical memory at time of writing). Aimed to avoid this:
          # https://dev.azure.com/stencila/stencila/_build/results?buildId=407&view=logs&j=93a04636-06ca-5d49-4f23-e6072abf78a3&t=b0cbcd7c-6809-5fdc-290f-01474a85fb2e&l=226
          NODE_OPTIONS: --max_old_space_size=8192

      - script: bash <(curl -s https://codecov.io/bash)
        displayName: 'Upload coverage'

  - job: Docker
    condition: false # Currently skipped
    pool:
      vmImage: ubuntu-latest
    steps:
      - task: DockerInstaller@0
        displayName: 'Use Docker'

      - script: |
          set -e
          docker build --tag stencila/encoda .
          docker run stencila/encoda
        displayName: 'Run tests in Docker'

  - job: Release
    dependsOn: [Linux, Docker]
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    pool:
      vmImage: ubuntu-latest
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: $(NODE_VERSION)
        displayName: 'Use Node.js $(NODE_VERSION)'

      - script: |
          set -e
          npm ci
          mkdir -p docs
          npx semantic-release
        env:
          GIT_AUTHOR_NAME: Stencila CI Bot
          GIT_AUTHOR_EMAIL: ci@stenci.la
          GIT_COMMITTER_NAME: Stencila CI Bot
          GIT_COMMITTER_EMAIL: ci@stenci.la
          GITHUB_TOKEN: $(GITHUB_TOKEN)
          NPM_TOKEN: $(NPM_TOKEN)
        displayName: 'Release package'
